<?php

namespace App\Command;

/***
 * Class XCat
 * @package App\Command
 */

use App\Models\User;
use App\Models\Relay;
use App\Services\Gateway\ChenPay;
use App\Utils\Hash;
use App\Utils\Tools;
use App\Services\Config;
//song
use App\Models\NodeInfoLog;
use App\Models\NodeOnlineLog;
use App\Models\Record;  // record表
use App\Models\DetectLog;
use App\Models\Speedtest;
use App\Models\EmailVerify;
use App\Utils\Telegram;



use App\Models\TrafficLog;
use App\Models\Cncdn;
//song
use App\Models\Bought;
use App\Models\Payback;
use App\Models\Code;
use App\Models\Node;

use App\Utils\GA;
use App\Utils\QRcode;

use Redis ; #song 

class XCat
{
    public $argv;

    public function __construct($argv)
    {
        $this->argv = $argv;
    }

    public function boot()
    {
        switch ($this->argv[1]) {
            case("alipay"):
                return (new ChenPay())->AliPayListen();
            case("wxpay"):
                return (new ChenPay())->WxPayListen();
                //song
            case("banUsernoPay"):
                return $this->banUsernoPay();
            case("test"):
                return $this->test();
            case("transRecord"):
                return $this->transRecord();
            case("createAdmin"):
                return $this->createAdmin();
            case("resetTraffic"):
                return $this->resetTraffic();
            case("setTelegram"):
                return $this->setTelegram();
            case("initQQWry"):
                 return $this->initQQWry();
            case("sendDiaryMail"):
                return DailyMail::sendDailyMail();
            case("sendFinanceMail_day"):
                return FinanceMail::sendFinanceMail_day();
            case("sendFinanceMail_week"):
                return FinanceMail::sendFinanceMail_week();
            case("sendFinanceMail_month"):
                return FinanceMail::sendFinanceMail_month();
            case("reall"):
                return DailyMail::reall();
            case("syncusers"):
                return SyncRadius::syncusers();
            case("synclogin"):
                return SyncRadius::synclogin();
            case("syncvpn"):
                return SyncRadius::syncvpn();
            case("nousers"):
                return ExtMail::sendNoMail();
            case("oldusers"):
                return ExtMail::sendOldMail();
            case("syncnode"):
                return Job::syncnode();
            case("syncnasnode"):
                return Job::syncnasnode();
            case("detectGFW"):
                return Job::detectGFW();
            case("syncnas"):
                return SyncRadius::syncnas();
            case("dailyjob"):
                return Job::DailyJob();
            case("hourlyjob"): //song 
                return Job::HourlyJob();
            case("checkjob"):
                return Job::CheckJob();
            case("dbclean"):
                return Job::DbClean();
            case("userga"):
                return Job::UserGa();
            case("backup"):
                return Job::backup(false);
            case("backupfull"):
                return Job::backup(true);
            case("initdownload"):
                return $this->initdownload();
            case("updatedownload"):
                return Job::updatedownload();
            case("cleanRelayRule"):
                return $this->cleanRelayRule();
            case("resetPort"):
                return $this->resetPort();
            case("resetAllPort"):
                return $this->resetAllPort();
            case("update"):
                return Update::update($this);
            case ("sendDailyUsageByTG"):
                return $this->sendDailyUsageByTG();
            case('npmbuild'):
                return $this->npmbuild();
            default:
                return $this->defaultAction();
        }
    }

    public function defaultAction()
    {
        echo(PHP_EOL."用法： php xcat [选项]".PHP_EOL);
        echo("常用选项:".PHP_EOL);
        echo("  createAdmin - 创建管理员帐号".PHP_EOL);
        echo("  setTelegram - 设置 Telegram 机器人".PHP_EOL);
        echo("  cleanRelayRule - 清除所有中转规则".PHP_EOL);
        echo("  resetPort - 重置单个用户端口".PHP_EOL);
        echo("  resetAllPort - 重置所有用户端口".PHP_EOL);
        echo("  initdownload - 下载 SSR 程序至服务器".PHP_EOL);
        echo("  initQQWry - 下载 IP 解析库".PHP_EOL);
        echo("  resetTraffic - 重置所有用户流量".PHP_EOL);
        echo("  update - 更新并迁移配置".PHP_EOL);
    }

    public function resetPort()
    {
        fwrite(STDOUT, "请输入用户id: ");
        $user=User::Where("id", "=", trim(fgets(STDIN)))->first();
        $origin_port = $user->port;

        $user->port = Tools::getAvPort();

        $relay_rules = Relay::where('user_id', $user->id)->where('port', $origin_port)->get();
        foreach ($relay_rules as $rule) {
            $rule->port = $user->port;
            $rule->save();
        }

        if ($user->save()) {
            echo "重置成功!\n";
        }
    }

    public function resetAllPort()
    {
        $users = User::all();
        foreach ($users as $user) {
            $origin_port = $user->port;
            $user->port = Tools::getAvPort();
            echo '$origin_port='.$origin_port.'&$user->port='.$user->port."\n";
            $user->save();
        }
    }

    public function cleanRelayRule()
    {
        $rules = Relay::all();
        foreach ($rules as $rule) {
            echo($rule->id."\n");
            if ($rule->source_node_id == 0) {
                echo($rule->id."被删除！\n");
                $rule->delete();
                continue;
            }

            $ruleset = Relay::where('user_id', $rule->user_id)->orwhere('user_id', 0)->get();
            $maybe_rule_id = Tools::has_conflict_rule($rule, $ruleset, $rule->id);
            if ($maybe_rule_id != 0) {
                echo($rule->id."被删除！\n");
                $rule->delete();
            }
        }
    }

    public function initdownload()
    {
        system('git clone https://github.com/xcxnig/ssr-download.git '.BASE_PATH."/public/ssr-download/", $ret);
        echo $ret;
    }

//  song 禁用滥用邀请的用户的账户
    // 如果购买了 64元以上套餐，但是发现实际 充值金额 + 邀请返利 少于 32元的话，就会被禁用账户。
    public function banUsernoPay()
    {
        echo "开始禁用无支付的账号";
        $boughts = Bought::where("price", ">", 64)->get();
        foreach ($boughts as $bought) {
            # code...
            $codes = Code::where("userid",$bought->userid)->sum('number');
            $paybacks = Payback::where("ref_by",$bought->userid)->sum('ref_get');
            //echo $codes + $paybacks;
            //echo "--";
            if (($codes + $paybacks) < 32) {
                # code...
                echo $codes + $paybacks;
                echo "-";
                echo $bought->userid;
                echo "  ;  ";
                User::where("id",$bought->userid)->update(['enable'=>'0']);
            }
        }
        echo "禁用完成 ";

    }

    public function test()
    {


       
        
        // $i = 0;
        // while ($i < 100) {
            
        //     $node = New Node();
        //     $node->name = 'test';
        //     $node->save();
        //     if ($node->id > 887 ) {
        //         $i = 999;
        //     }
        //     $i++;
        //     echo $i;
        // }
            

        // $nodes = Node::where('node_sort','<','1')->get();
        // foreach ($nodes as $node) {
        //     $node->node_sort = 0;
        //     $node->save();
        // }

        // # get the nodes from and name 
        // $nodes = Node::where("type",1)->where('is_clone',0)->orderby('node_group','desc')->get();
        // $a='';
        // foreach($nodes as $node){
        //     parse_str($node->node_ip, $b);  //获取参数
        //     $a.=$node->name.' '.$node->country_code. '@'.$node->id  .' | G'.$node->node_group.' | '.$b['expire'].' | '.$b['from']."\n";
        //     echo $node->id.' | ';
        // }
        // $myfile = fopen("/www/wwwroot/ssp-uim/public/out.txt", "w") or die("Unable to open file!");
        // fwrite($myfile, $a);
        // fclose($myfile);
        // echo 'done';
        

        // echo '迁移分组 2 to 3';
        // $f = 2;
        // $t = 3;
        // $users = User::where("node_group",$f)->get();
        // $nodes = Node::where("node_group",$f)->get();
        // foreach($nodes as $node){
        //     $node->node_group = $t;
        //     echo $node->id .'===';
        //     $node->save();
        // }
        // foreach($users as $user){
        //     $user->node_group = $t;
        //     echo $user->id . '---';
        //     $user->save();
        // }

        

        // $nodesno = '5===11===44===49===52===57===63===64===68===72===82===90===107===132===137===139===150===160===161===166===172===174===175===180===183===185===194===212===223===229===243===259===275===278===281===282===288===290===296===301===335===340===342===344===345===347===348===349===351===353===355===356===357===369===370===374===378===379===400===402===403===422===423===425===427===431===432===433===438===440===444===447===454===478===479===480===481===490===491===492===493===502===503===504===505===584===585===586===587===588===614===615===616===617===618';
        // $arr = explode('===',$nodesno);
        // foreach($arr as $a ){
        //     echo $a. '--';
        //     // $b = (int)$a;
        //     // echo $b.'==';
        //     $node = Node::where('id',$a)->first();
        //     $node->node_group = 5;
        //     $node->save();


        // }

        // $usersno = '336298---336716---337119---341487---344823---360429---362653---363613---365121---368081---371099---387405---388968---402498---406732---407421---414213---419053---422847---423598---425608---437589---441735---445787---449475---462804---471627---478005---478044---479646---480690---480959---481026---484767---485160---487166---487746---487821---487877---487920---488169---488580---492189---492364---494013---495464---495636---496278---497892---497982---500013---505485---508905---510135---510315---510354---510456---511791---512866---513609---513789---517977---519250---520771---520935---527784---535803---538373---541354---547176---547482---548226---548997---551829---552182---555534---558054---560558---562236---576651---576711---582981---583059---587505---591237---594693---595935---596943---606066---611572---611718---613887---614226---615306---624105---624960---625755---626979---627099---628362---628476---628827---629169---631280---632827---633039---635894---636420---637182---637778---638715---640698---641439---642870---644244---646647---646662---646668---646782---663483---667441---667971---668610---676680---680199---683115---684279---684570---685032---685629---685644---685962---686172---687336---687380---687408---687689---688368---688785---689124---689523---689946---690018---690191---690439---690465---690546---690816---690929---691089---691617---691650---692303---692424---692571---693126---693354---693657---693828---693843---693873---693936---693945---694042---694065---694317---694554---694728---694731---695010---695056---695121---695207---695394---695568---695745---696411---696420---696453---696477---696645---696795---697081---697387---697578---697581---697671---697773---697890---698034---698115---698118---698181---698250---698401---698472---698535---698616---698670---698781---698844---698886---699039---699063---699111---699132---699232---699252---699312---699384---699456---699573---699669---699843---700047---700215---700245---700641---700872---701145---701319---701664---701781---701868---701874---701943---702036---702051---702088---702183---702198---702211---702219---702225---702456---702625---702822---702871---702948---703074---703104---703170---703294---703353---703458---703461---703591---703644---703781---704050---704240---704511---704580---704649---705053---705096---705116---705168---705270---705327---705489---705576---705588---705594---705666---705708---705819---706047---706266---706449---706536---706704---706986---707073---707193---707322---707430---707613---707865---708126---708277---708314---708372---708467---708471---708512---708513---708657---708684---708930---708945---708993---709006---709008---709026---709158---709236---709251---709296---709334---709338---709404---709416---709617---709794---709875---710127---710601---710922---711582---711621---711699---711852---711972---712601---712812---712947---713574---713619---713661---714252---714261---714558---714630---714924---715284---715548---715716---716151---716328---716463---716481---716745---717087---717366---717369---717600---717612---717811---718002---718052---718530---718554---718575---718719---718779---718956---719082---719184---719340---719352---719355---719391---719544---719580---719583---719730---720018---720483---720522---720744---720827---720909---721275---721293---721308---721548---721668---721719---721875---721962---722160---722313---722396---722397---722460---722496---722582---722622---722628---722685---722826---722856---722874---723230---723237---723330---723483---723546---723576---724315---724462---724647---724827---724950---725016---725766---725865---726309---726630---726672---727008---727206---727254---727425---727482---727554---727659---727758---727874---728184---728310---728337---728958---729213---729423---729612---729708---729771---729819---730077---730197---730317---730413---730431---730566---730584---730596---730737---730806---730848---730869---730995---731109---731142---731169---731235---731778---731976---731994---732201---732210---732225---732276---732282---732414---732543---732561---732576---732714---732795---732900---733479---733539---733560---733749---733969---734037---734079---734121---734172---734202---734217---734296---734324---734367---734424---734442---734589---734604---734667---734715---734829---734865---735030---735057---735108---735267---735333---735510---735585---735700---735753---736047---736065---736158---736295---736314---736326---736491---736557---736698---736866---737061---737268---737270---737334---737337---737479---737589---737604---737610---737625---737928---737982---738048---738273---738351---738456---738501---738699---738753---738759---738801---738843---739017---739167---739224---739230---739248---739311---739344---739386---739449---739479---739566---739581---739731---739953---740031---740172---740244---740295---740343---740362---740416---740571---740667---740682---740685---740787---740790---740802---740847---740889---740940---741027---741039---741069---741120---741123---741294---741297---741477---741636---741719---741963---742080---742164---742167---742269---742485---742683---742776---742782---742806---742890---742938---743019---743070---743163---743448---743457---743484---743496---743559---743562---743571---743771---743984---743985---743988---744021---744050---744192---744243---744342---744351---744354---744360---744507---744573---744879---744885---744933---745098---745129---745182---745197---745200---745440---745449---745488---745548---745581---745590---745647---745698---745734---745794---745800---745815---745818---745885---745896---745935---746247---746286---746388---746436---746493---746517---746582---746742---746749---746943---746970---747003---747333---747432---747438---747480---747555---747585---747660---747663---747681---747690---747765---747801---747858---747894---748149---748161---748170---748218---748293---748334---748461---748521---748551---748611---748671---748731---748830---748851---748923---748959---749007---749046---749127---749136---749314---749343---749352---749355---749361---749412---749418---749472---749487---749541---749598---749616---749631---749688---749718---749862---749898---749949---749973---750096---750105---750138---750153---750219---750285---750306---750378---750468---750498---750510---750678---750699---750939---750984---751038---751047---751122---751133---751171---751227---751335---751458---751485---751491---751520---751560---751602---751617---751635---751677---751703---751821---751842---751926---751977---751980---751992---751998---752013---752025---752031---752049---752052---752067---752085---752091---752103---752109---752115---752142---752154---752157---752166---752175---752178---752179---752196---752211---752214---752223---752256---752325---752355---752358---752364---752371---752376---752385---752422---752448---752454---752460---752463---752500---752526---752529---752583---752586---752598---752616---752625---752658---752712---752721---752748---752760---752799---752823---752829---752868---752886---752887---752913---752958---753003---753021---753027---753030---753033---753051---753081---753090---753177---753180---753213---753225---753228---753250---753267---753279---753330---753375---753411---753465---753468---753471---753474---753492---753498---753501---753522---753534---753543---753600---753612---753639---753651---753654---753678---753708---753714---753723---753729---753732---753774---753783---753789---753792---753813---753831---753915---753918---753933---753951---753990---754002---754071---754110---754221---754239---754251---754260---754278---754299---754302---754341---754386---754395---754413---754473---754476---754479---754563---754671---754680---754683---754695---754701---754716---754740---754746---754770---754779---754800---754809---754863---754911---754932---754986---755064---755082---755130---755141---755148---755163---755184---755193---755259---755292---755301---755307---755319---755325---755334---755337---755346---755391---755400---755409---755433---755439---755448---755460---755469---755478---755490---755502---755580---755655---755664---755667---755736---755745---755763---755766---755775---755820---755853---755907---755925---755940---755946---755967---756027---756054---756081---756090---756147---756159---756165---756189---756225---756288---756297---756312---756318---756345---756381---756417---756426---756438---756555---756642---756669---756699---756738---756780---756783---756792---756816---756843---756855---756891---756892---756936---757020---757041---757059---757068---757092---757119---757125---757170---757194---757242---757317---757320---757326---757329---757380---757383---757578---757626---757641---757644---757647---757656---757704---757791---757797---757830---757839---757842---757863---757866---757902---757917---757956---757995---758016---758019---758043---758085---758109---758133---758151---758157---758205---758217---758304---758322---758334---758427---758454---758475---758499---758562---758577---758580---758583---758637---758670---758724---758739---758778---758850---758901---758943---758946---759009---759045---759069---759243---759270---759336---759480---759498---759531---759579---759585---759630---759654---759765---759771---759780---759783---759786---759807---759813---759864---759882---759945---759969---759996---760029---760095---760145---760182---760215---760221---760269---760332---760335---760338---760343---760356---760380---760383---760386---760413---760425---760458---760524---760548---760575---760587---760599---760668---760680---760722---760728---760743---760752---760767---760770---760806---760848---760857---760872---760875---760878---760896---760962---761043---761052---761058---761073---761085---761103---761169---761202---761223---761269---761274---761361---761397---761433---761439---761442---761451---761463---761475---761520---761583---761625---761667---761736---761757---761769---761784---761835---761892---761913---761916---761943---761976---762012---762021---762045---762069---762072---762108---762138---762153---762156---762159---762162---762171---762210---762233---762243---762309---762318---762321---762393---762432---762435---762495---762498---762510---762513---762525---762540---762627---762654---762660---762672---762687---762708---762720---762741---762747---762762---762798---762801---762828---762840---762846---762849---762855---762876---762879---762933---762948---762954---762969---762975---762981---762987---763029---763071---763122---763131---763146---763161---763173---763194---763200---763215---763260---763281---763308---763323---763416---763458---763500---763515---763519---763698---763782---763794---763803---763806---763827---763836---763839---763881---763956---763977---764016---764082---764103---764124---764142---764143---764151---764184---764193---764196---764202---764211---764218---764256---764265---764280---764283---764310---764313---764343---764372---764379---764409---764442---764451---764490---764502---764511---764529---764535---764568---764646---764658---764664---764706---764724---764727---764735---764736---764745---764751---764832---764853---764860---764862---764865---764883---764895---764955---764961---764970---765015---765021---765051---765054---765108---765117---765120---765132---765138---765162---765189---765195---765222---765294---765297---765309---765324---765354---765393---765408---765423---765459---765462---765480---765486---765498---765504---765507---765516---765525---765549---765567---765579---765615---765642---765648---765654---765699---765765---765798---765801---765807---765825---765834---765843---765888---765927---765945---765993---766020---766050---766053---766059---766080---766086---766101---766143---766146---766155---766164---766203---766215---766227---766239---766254---766278---766332---766338---766344---766395---766404---766416---766425---766437---766440---766470---766485---766488---766500---766506---766608---766617---766647---766683---766722---766779---766800---766827---766833---766845---766884---766893---766902---766950---766971---766986---766998---767037---767052---767076---767109---767134---767166---767169---767181---767187---767223---767229---767271---767283---767307---767316---767322---767328---767343---767346---767439---767445---767481---767484---767631---767634---767640---767667---767697---767736---767773---767829---767844---767847---767901---767937---768012---768018---768048---768072---768078---768087---768105---768108---768166---768186---768232---768234---768240---768270---768276---768294---768327---768333---768348---768351---768366---768369---768393---768408---768423---768486---768540---768552---768561---768564---768597---768639---768654---768669---768686---768690---768696---768702---768765---768792---768813---768828---768837---768873---768876---768903---768924---768948---768951---768996---769011---769038---769050---769059---769095---769101---769128---769146---769149---769167---769179---769188---769212---769242---769302---769344---769362---769374---769389---769404---769419---769434---769437---769455---769518---769528---769551---769581---769629---769632---769680---769686---769692---769698---769734---769740---769782---769788---769791---769815---769818---769839---769845---769854---769902---769905---769911---769956---769971---770007---770028---770031---770038---770058---770070---770079---770085---770088---770094---770097---770112---770121---770130---770136---770145---770169---770184---770205---770214---770232---770241---770280---770295---770299---770310---770343---770352---770382---770391---770397---770412---770421---770466---770481---770487---770502---770517---770523---770530---770541---770556---770562---770571---770592---770619---770637---770670---770676---770688---770694---770706---770709---770730---770751---770760---770787---770817---770832---770850---770874---770916---770982---770985---770997---771024---771033---771051---771069---771072---771093---771111---771114---771115---771117---771120---771156---771159---771165---771174---771183---771210---771219---771222---771225---771228---771252---771279---771285---771294---771318---771327---771336---771340---771411---771420---771429---771433---771435---771438---771444---771450---771471---771480---771519---771525---771555---771573---771576---771609---771633---771648---771657---771663---771687---771699---771717---771723---771732---771738---771744---771748---771765---771780---771792---771795---771804---771816---771819---771855---771876---771879---771918---771921---771930---771939---771989---771996---771999---772008---772044---772053---772122---772125---772137---772140---772204---772224---772230---772263---772293---772299---772362---772365---772371---772398---772464---772476---772542---772590---772620---772644---772647---772668---772674---772677---772700---772731---772740---772743---772758---772785---772803---772833---772881---772887---772890---772896---772911---772932---772959---772983---773004---773007---773019---773025---773037---773048---773055---773112---773115---773121---773124---773169---773175---773211---773271---773304---773322---773358---773359---773391---773427---773451---773508---773532---773544---773547---773556---773571---773619---773625---773637---773703---773766---773787---773820---773826---773832---773838---773839---773844---773853---773901---773907---773955---773964---773983---774006---774021---774024---774033---774036---774045---774123---774171---774177---774204---774213---774240---774273---774285---774318---774324---774339---774354---774363---774926---775176---775197---775608---775635---775891---775980---776054---776182---776262---776270---776417---776488---776509---776661---776772---776775---776795---777066---777192---777208---777384---777556---778136---778142---778212---778291---778402---778451---778510---778546---778581---778634---778656---778719---778794---778799---778800---778806---778847---778852---778879---778909';
        // $arr = explode('---',$usersno);
        // foreach($arr as $a){
        //     echo $a;
        //     echo '+++';
        //     $user = User::where('id',$a)->first();
        //     $user->node_group = 5;
        //     $user->save();
        // }
        
        // echo '2组变成 4 3 2 三个分组';
        // $users = User::where("node_group",2)->get();
        // // $nodes = Node::where("node_group",2)->where('is_clone',0)->get();
        // echo '开始迁移用户';
        // foreach ($users as $user) {
        //     # code...
        //     $nn = $user->id % 3 + 2 ;
        //     echo $user->id . '---';
        //     echo $nn;
        //     $user->node_group = $nn;
        //     $user->save();
        // }
        
     
        




        // echo 'try clean node online log ';
        // NodeOnlineLog::where("log_time", "<", time()-86400*3)->delete();
        // echo 'try to clean user traffic log ';
        // TrafficLog::where("log_time", "<", time()-86400*3)->delete();

       
        // echo 'a1105_add_2022-09-23_2022-11-07  to group 1';
        // $nodes = Node::where('node_group',2)->where('info','a1105_add_2022-09-23_2022-11-07')->get();
        // foreach($nodes as $node){
        //     $node->node_group = 1;
        //     echo $node->id . '---';
        //     $node->save();
        // }
        // echo '把3组节点换成4组';
        // $nodes = Node::where('node_group',3)->get();
        // foreach($nodes as $node){
        //     $node->node_group = 4;
        //     echo $node->id . '+++';
        //     $node->save();
        // }

        // echo "初始: ".memory_get_usage()."B\n";
        // $users = User::where('enable','>',0)->where('class','>',0)->get();
        // echo 'start';
        // echo "使用: ".memory_get_usage()."B\n";
        // foreach ($users as $user) {
        //     // $user->renew += 0.1;
        //     // $user->transfer_limit += $user->class*1024*1024*1024; // 每天给用户赠送 5G流量 这个可以有
        //     // $user->transfer_limit += 1*1024*1024*1024; // 现在是2G每天 这样可以限制用户的流量使用情况！
        //     $user->last_day_t = $user->d;     // // 这里改变一下，只记录用户 d 的数据，不记录 u 数据。
        //     $user->rss_count_lastday = $user->rss_count; // 记录昨日订阅数量统计
        //     $user->rss_ips_lastday = $user->rss_ips_count; // 记录昨日ips来源统计
        //     $user->save();
        //     echo $user->id;
        //     echo '-----';
        // }
        // echo "释放: ".memory_get_usage()."B\n";
        // echo "峰值: ".memory_get_peak_usage()."B\n";
       

        


        echo '当前无数据';
        //自动审计每天节点流量数据 song
        // $nodes_vnstat = Node::where('id','>',9)->where('node_group','>',0)->get();  // 只获取9以上的分组不是0的节点 因为0组是给news节点用的。
        // foreach ($nodes_vnstat as $node) {
        //     if ($node->node_bandwidth == $node->node_bandwidth_lastday) {   // 判断这个节点是否今天没有走流量，是否是有问题的节点？
        //         continue;   
        //     }
        //     // 这两个 if别反了。 需要把 流量记录下，方便统计每日消耗的真实流量
        //     if ( $node->node_heartbeat < (time() - 7200) ) {        // 判断节点在过去两小时内 是否存在心跳
        //         continue;
        //     }
        //     //
        //     $traffic_today = $node->node_bandwidth - $node->node_bandwidth_lastday;
        //     $today = date('d');
        //     if ($node->node_bandwidth_limit > 1 && $today != $node->bandwidthlimit_resetday) {  
        //         // node_sort
        //         // rate 节点倍率计算方案
        //         $traffic_used_days = 32 + $today - $node->bandwidthlimit_resetday;
        //         $traffic_used_days > 32 && $traffic_used_days -= 32;
        //         $traffic_used_days < 1 && $traffic_used_days = 1; # 防止已用时间为0
        //         // $node->traffic_rate = round( ($node->node_bandwidth * 50 / $node->node_bandwidth_limit / $days)  ,1);  # 旧的计算方式,已抛弃
        //         $traffic_used_ever_day = round( ( $node->node_bandwidth / 1024 / 1024 / 1024 / $traffic_used_days ), 2) ;   # 计算已用日均流量 G
        //         $node->node_oncost > 0 && $node->traffic_rate = round(( $traffic_used_ever_day / $node->node_oncost ), 1);  # 倍率= 已用日均流量/剩余日均流量 G
        //         echo $node->traffic_rate;
        //         echo '--';
        //         # 下面 计算 流量的 限额 和 金钱的 方案,考虑到有 fake节点,目前做不到这样. 
        //         if ( $node->node_cost > 0 && $node->node_bandwidth_limit > 0 ) {
        //             // 注意: node_bandwidth_limit 是 *1024*1024*1024 得出来的.
        //             $node->traffic_rate = round(($node->traffic_rate * 500 * $node->node_cost * 1024 * 1024 *1024 / $node->node_bandwidth_limit ),1); # 倍率再算上 流量价格  流量/刀  目前能买到500G/刀 ,就是 1800G/4.5刀
        //             echo $node->traffic_rate;
        //             echo '-----';
        //         }
        //     }
        // }
        # is_clone 设置和记录
        // $nodes = Node::where('id','>',40)->get();
        // foreach($nodes as $node){
        //     parse_str($node->server, $v2);  //获取参数
        //     $getid = $v2['host'];
        //     $getid = str_replace('.node.xyz','',$getid);
        //     $getid = str_replace('.s2022.xyz','',$getid);
        //     $getid = str_replace('.s2022.buzz','',$getid);
        //     $getid = str_replace('ipv6s','',$getid);
        //     $getid = str_replace('s','',$getid);
        //     // echo $getid;
        //     echo '------------';
        //     if ($getid != $node->id) {
        //         $node->is_clone=$getid;
        //         echo $getid . ' != ' . $node->id;
        //         echo '----------------';
        //         $node->save();
        //     }
            
        // }

        # 把指定节点信息的节点,更改节点分组. 
        #
        # Config
        // $info = 'a1107_2022-10-07';  # 需要查找的节点 info
        // $now_group = 1; #该节点现在的分组
        // $new_group = 2; #该节点需要移动到的分组
        // #
        
        // $nodes = Node::where('id','>',9)->get();
        // foreach($nodes as $node){
        //     $node->traffic_rate = 1;
        //     $node->save();
        // }

        // echo '20220210';
        // $all_traffic_today = Node::where('id','>',9)->where('node_group','>',0)->where('node_cost','>',1)->sum('node_bandwidth') - Node::where('id','>',9)->where('node_group','>',0)->where('node_cost','>',1)->sum('node_bandwidth_lastday');
        // echo '全站今日流量'.$all_traffic_today / 1073741824 .'G_';
        // // 总日供给流量
        // $all_traffic_daily_supply = Node::where('id','>',9)->where('type',1)->where('node_cost','>',1)->where('node_group','>',0)->sum('node_oncost');
        // echo '全站供给流量'. $all_traffic_daily_supply  .'G_';
        // // 组1 日耗流量
        // $group1_traffic_today = Node::where('id','>',9)->where('node_group','=',1)->where('node_cost','>',1)->sum('node_bandwidth') - Node::where('id','>',9)->where('node_group','=',1)->where('node_cost','>',1)->sum('node_bandwidth_lastday');
        // echo '组1消耗' .$group1_traffic_today  / 1073741824 .'G_';
        // // 组1 日供给流量
        // $group1_traffic_daily_supply = Node::where('id','>',9)->where('type',1)->where('node_cost','>',1)->where('node_group','=',1)->sum('node_oncost');
        // echo '组1供给' .$group1_traffic_daily_supply   .'G_';
        // // 组2 日耗流量
        // $group2_traffic_today = Node::where('id','>',9)->where('node_group','=',2)->where('node_cost','>',1)->sum('node_bandwidth') - Node::where('id','>',9)->where('node_group','=',2)->where('node_cost','>',1)->sum('node_bandwidth_lastday');
        // echo 'Group2 used ' . $group2_traffic_today  / 1073741824 .'G_';
        // // 组2 日供给流量
        // $group2_traffic_daily_supply = Node::where('id','>',9)->where('type',1)->where('node_cost','>',1)->where('node_group','=',2)->sum('node_oncost');
        // echo 'G2 supply' . $group2_traffic_daily_supply   .'G_';
        // // 组4 日耗流量
        // $group4_traffic_today = Node::where('id','>',9)->where('node_group','=',4)->where('node_cost','>',1)->sum('node_bandwidth') - Node::where('id','>',9)->where('node_group','=',4)->where('node_cost','>',1)->sum('node_bandwidth_lastday');
        // echo 'G4 used ' .$group4_traffic_today   / 1073741824 .'G_';
        // // 组4 日供给流量
        // $group4_traffic_daily_supply = Node::where('id','>',9)->where('type',1)->where('node_cost','>',1)->where('node_group','=',4)->sum('node_oncost');
        // echo 'G2 supply ' .$group4_traffic_daily_supply   .'G_';

        // $total = 0;
        // echo "Group4: \n";
        // $nodes = Node::where('id','>',9)->where('node_group',4)->where('type',1)->where('node_cost','>',1)->orderBy('node_oncost','DESC')->get();
        // foreach ($nodes as $key => $node) {
        //     echo 'Id= ' . $node->id ."\t";
        //     echo '今= ' . floor($node->node_bandwidth / 1073741824 )."G \t";
        //     echo '昨= ' . floor($node->node_bandwidth_lastday / 1073741824 )."G \t";
        //     echo '差= ' . floor(($node->node_bandwidth - $node->node_bandwidth_lastday)/ 1073741824 )."G \t";
        //     echo '供= ' . $node->node_oncost. 'G  ';
        //     echo "\n";
        //     $total += ($node->node_bandwidth - $node->node_bandwidth_lastday)/ 1073741824;
        // }
        // echo '---';
        // echo floor($total) .'G';

        // $nodes = Node::where('id','>',9)->where('type',1)->get();
        // foreach ($nodes as $key => $node) {
        //     $node->custom_rss = 1;
        //     $node->save();
        // }
        
        // $snodes = Node::where('id','>',9)->get();
        // foreach ($snodes as $key => $node) {
        //     // parse_str($node->node_ip,$v2);
        //     $info = $node->status;
        //     $status = $node->info;

        //     $node->status = $status;
        //     $node->info = $info;
        //     $node->save();
        // }


        // $snodes = Node::where('id','>',9)->get();
        // foreach ($snodes as $key => $node) {
        //     // parse_str($node->node_ip,$v2);
        //     $node->sort == 11 && $v2 = 'v2=vmess';  // 获取开头参数
        //     $node->sort == 12 && $v2 = 'v2=vmess';  // 这个 12 ，还要写成 加上CDN参数呢
        //     //v2=vmess&add=&port=&aid=&scy=&net=&type=&host=&path=&tls=&sni=&alpn=&ecpt=&flow=&uuid=&cdn=
        //     $cut = explode('#',$node->node_ip);
        //     $v2 .= '&add=' . $node->server;
        //     $v2 .= '&port=' . $cut['1'];
        //     $v2 .= '&aid=0';
        //     $v2 .= '&scy=' . $cut['5']; //就是加密
        //     $v2 .= '&net=' . $cut['4'];
        //     $v2 .= '&type='  ;//就是伪装
        //     $v2 .= '&host=' .$cut['6'];
        //     $v2 .= '&path=/' .$cut['7'];
        //     $v2 .= '&tls=' .$cut['8'];
        //     $v2 .= '&sni=';
        //     $v2 .= '&alpn=';
        //     $v2 .= '&ecpt=';
        //     $v2 .= '&flow=';
        //     $v2 .= '&uuid=' . $cut['2']; //独立节点
        //     if ( $node->sort == 12 ) {
        //         $v2 .= '&cdn=cf';  // 这个CDN只要有就行，什么参数无所谓。
        //     } else{
        //         $v2 .= '&cdn=';
        //     }
            
        //     $node->server = $v2;
        //     $node->node_ip = 'ip='.$cut['0'].'&ipv6=';
        //     $node->sort == 12 && $node->sort = 11;  // 把之前的 cf节点给转换回来。
        //     $node->save();
        // }
        // // 先获取 所有的 从 5.1日之后的所有的 payback  这个先从 5.1日 之后的所有账号的处理一遍！ 这个挺重要的！  然后处理所有的 5.12日前的
        // $paybacklistcount = Payback::where('total','=',-1)->where('callback','=',null)->where('datetime','>',1619755921)->where('datetime','<',1620792721)->count();
        // echo '-总数-' . $paybacklistcount;
        // $paybacklist = Payback::where('total','=',-1)->where('callback','=',null)->where('datetime','>',1619755921)->where('datetime','<',1620792721)->get();
        // foreach ( $paybacklist as $p ) {
        //     // 两个事情，如果是 邀请人已经不存在了。那么就把这条数据 标注为 3 代表老帐号已删除？
        //     // 如果 被邀请人已经不存在了，就把这个返利删除了。
        //     $user = User::where('id','=',$p->userid)->first();
        //     $ref_by = User::where('id','=',$p->ref_by)->first();
        //     echo '||---go---';
        //     echo '--userid=' . $p->userid;
        //     echo  '--ref_by=' . $p->ref_by;
        //     if ($ref_by == null ) {  // 如果 邀请人不存在的话，怎么办？
        //         $p->callback = 3; // 3代表邀请人已删除。这条邀请已经无效了。
        //         echo '-callback=3-';
        //         // // 删除掉和这个用户所有有关的payback日志
        //         // Payback::where('ref_by', '=' , $p->ref_by)->delete();
        //         // echo '-删除所有此邀请人信息-';
        //     } elseif ( $user == null ) { // 如果邀请人存在,被邀请人删除了那么就收回返利
        //         // 需要检查一次，这个返利是否已经被收回了。
        //         $refback = Payback::where('total','=',-2)->where('userid','=',$p->userid)->where('ref_by','=', $p->ref_by)->first();
        //         if ($refback == null ) { // 如果不存在已收回的标注，就收回一次。
        //             echo '-refback=null-';
        //             echo '-money='. $ref_by->money;
        //             $ref_by->money -= $p->ref_get ;
        //             $ref_by->save();
        //             echo '-money='. $ref_by->money;
        //             $p->callback = 1; //1=返利已经被收回。
        //             // 这里写入一个新的记录
        //             $Payback = new Payback();
        //             $Payback->total = -2;
        //             $Payback->userid = $p->userid;  //用户注册的ID
        //             $Payback->ref_by = $p->ref_by;  //邀请人ID
        //             $Payback->ref_get = - $p->ref_get;
        //             $Payback->datetime = time();
        //             $Payback->save();
        //         }elseif ($refback->id) { // 如果存在，并已经收回过一次了。就备注一下
        //             echo '-refback已经处理了-';
        //             $p->callback = 1;
        //         }
        //     } 
        //     $p->save();
        //     echo '---end---||';
        // }
    //   // 2021.3.12 批量替换域名
    //   $nodelist = Node::all();
    //   foreach ($nodelist as $node) {
    //     // code...
    //     $node->server=str_ireplace("snode.xyz","snodes.xyz",$node->server);
    //     $node->node_ip=str_ireplace("snode.xyz","snodes.xyz",$node->node_ip);
    //     $node->save();
    //   }

      // 测试 file_put_contents 能不能写入文件
      // $date = date('Y-m-d H:i:s');
      // $dateMonth = date('m');
      // $dateDay = date('d');
      // $dateHour = date('H');
      //
      // //获取上一次的数据 其中 那个 node_bandwidth_lastday=昨日记录！ node_bandwidth_limit=上一个小时的记录！
      // $nodeRecord = Node::where('id',3)->first();
      // $transNow = Node::where('id','>',9)->sum('node_bandwidth');
      //
      // //写入每小时的数据
      // $transLasthour = $nodeRecord->node_bandwidth_limit;
      // $transHourPath = "/www/wwwroot/ssp-uim/public/transhourly.html";
      // $hourlyDate = '<br>' . date('m-d H') . ' |  ' . ($transNow - $transLasthour)/1000000000000 .'T';
      // file_put_contents($transHourPath,$hourlyDate,FILE_APPEND);
      // //写入昨日的记录到
      // $nodeRecord->node_bandwidth_limit = $transNow;
      //
      // // 写入每天的数据
      // if (date('H') == 19) {
      //   $transLastday = $nodeRecord->node_bandwidth_lastday;
      //   $transDayPath = "/www/wwwroot/ssp-uim/public/transdaily.html";
      //   $dailyDate = '<br>' . date('y-m d') . ' |  ' . ($transNow - $transLastday)/1000000000000 .'T';
      //   file_put_contents($transDayPath,$dailyDate,FILE_APPEND);
      //   $nodeRecord->node_bandwidth_lastday = $transNow;
      // }
      //
      // #保存这次数据，方便下次对比
      // $nodeRecord->save();
      //
      // # end


      //判断是否晚上3点，写入每天的数据


      // // cncdns md5 给 数据库的 cncdn 一些空值加密
      //   $cncdns = Cncdn::where('areaid','=','')->get();
      //   foreach ($cncdns as $cncdn) {
      //     $cncdn->areaid = md5($cncdn->area);
      //     $cncdn->ipmd5 = md5($cncdn->cdnip);
      //     $cncdn->save();
      //   }

      // // 把md5 后的数据，ip和 md5ip 对应输出
      // $cncdns = Cncdn::where('server','=','osline.cn')->get();
      // foreach ($cncdns as $cncdn) {
      //     echo $cncdn->cdnip;
      //     echo '\n';
      // }
      //
      // foreach ($cncdns as $cncdn) {
      //   echo $cncdn->ipmd5;
      //   echo '\n';
      // }

    }

    
    

    public function transRecord()
    {

        //获取上一次的数据 其中 那个 node_bandwidth_lastday=昨日记录！ node_bandwidth_limit=上一个小时的记录！
        $nodeRecord = Node::where('id',3)->first();
        $transNow = Node::where('id','>',9)->sum('node_bandwidth');

        //写入每小时的数据
        $transLasthour = $nodeRecord->node_bandwidth_limit;
        $transHourPath = "/www/wwwroot/ssp-uim/public/transhourly.html";
        $hourlyDate = round(($transNow - $transLasthour)/1000000000) . date('mdH') . '<br>' ;
        file_put_contents($transHourPath,$hourlyDate,FILE_APPEND);
        //写入昨日的记录到
        $nodeRecord->node_bandwidth_limit = $transNow;

        // //写入online 在线人数每小时统计
        // $nodeOnline = Node::where('type',1)->sum('node_online');
        // $onlineHourPath = "/www/wwwroot/ssp-uim/public/onlinehourly.html";
        // $onlineDate = $nodeOnline . date('mdH') . '<br>';
        // file_put_contents($onlineHourPath,$onlineDate,FILE_APPEND);
        // 写入 online 用户的每小时在线人数 就是这个小时在线人数的累计值。
        $userOnline = User::where("enable","=",1)->where('t','>',(time()-3600))->count();
        $onlineHourPath = "/www/wwwroot/ssp-uim/public/onlinehourly.html";
        $onlineDate = $userOnline . date('mdH') . '<br>';
        file_put_contents($onlineHourPath,$onlineDate,FILE_APPEND);

        // 写入每天的数据
        if (date('H') == 6) {
            $transLastday = $nodeRecord->node_bandwidth_lastday;
            $transDayPath = "/www/wwwroot/ssp-uim/public/transdaily.html";
            $dailyDate = round(($transNow - $transLastday)/1000000000) . date('ymd') . '<br>' ;
            file_put_contents($transDayPath,$dailyDate,FILE_APPEND);
            $nodeRecord->node_bandwidth_lastday = $transNow;
        }

        #保存这次数据，方便下次对比
        $nodeRecord->save();


    }


    public function createAdmin()
    {
        echo "add admin/ 创建管理员帐号.....";
        // ask for input
        fwrite(STDOUT, "Enter your email/输入管理员邮箱: ");
        // get input
        $email = trim(fgets(STDIN));
        // write input back
        fwrite(STDOUT, "Enter password for: $email / 为 $email 添加密码: ");
        $passwd = trim(fgets(STDIN));
        echo "Email: $email, Password: $passwd! ";
        fwrite(STDOUT, "Press [Y] to create admin..... 按下[Y]确认来确认创建管理员账户..... \n");
        $y = trim(fgets(STDIN));
        if (strtolower($y) == "y") {
            echo "start create admin account";
            // create admin user
            // do reg user
            $user = new User();
            $user->user_name = "admin";
            $user->email = $email;
            $user->pass = Hash::passwordHash($passwd);
            $user->passwd = Tools::genRandomChar(6);
            $user->port = Tools::getLastPort()+1;
            $user->t = 0;
            $user->u = 0;
            $user->d = 0;
            $user->transfer_enable = Tools::toGB(Config::get('defaultTraffic'));
            $user->invite_num = Config::get('inviteNum');
            $user->ref_by = 0;
            $user->is_admin = 1;
            $user->expire_in=date("Y-m-d H:i:s", time()+Config::get('user_expire_in_default')*86400);
            $user->reg_date=date("Y-m-d H:i:s");
            $user->money=0;
            $user->im_type=1;
            $user->im_value="";
            $user->class=0;
            $user->plan='A';
            $user->node_speedlimit=0;
            $user->theme=Config::get('theme');

            $ga = new GA();
            $secret = $ga->createSecret();
            $user->ga_token=$secret;
            $user->ga_enable=0;

            if ($user->save()) {
                echo "Successful/添加成功!\n";
                return true;
            }
            echo "添加失败";
            return false;
        }
        echo "cancel";
        return false;
    }

    public function resetTraffic()
    {
        try {
            User::where("enable", 1)->update([
            'd' => 0,
            'u' => 0,
            'last_day_t' => 0,
            ]);
        } catch (\Exception $e) {
            echo $e->getMessage();
            return false;
        }
        return "reset traffic successful";
    }


    public function setTelegram()
    {
        $bot = new \TelegramBot\Api\BotApi(Config::get('telegram_token'));
        //if ($bot->setWebhook(Config::get('baseUrl')."/telegram_callback?token=".Config::get('telegram_request_token')) == 1) {
        // 这里 网站屏蔽了 所有国外的ip，所以只能使用 ssn这个域名来访问了
        if ($bot->setWebhook("https://ssp-ssn.freessr.bid/telegram_callback?token=".Config::get('telegram_request_token')) == 1) {
            echo("设置成功！");
        }
    }

    public function initQQWry()
    {
        echo("downloading....");
        $qqwry = file_get_contents("https://qqwry.mirror.noc.one/QQWry.Dat");
        if ($qqwry != "") {
            $fp = fopen(BASE_PATH."/storage/qqwry.dat", "wb");
            if ($fp) {
                fwrite($fp, $qqwry);
                fclose($fp);
            }
            echo("finish....");
        }
    }
    public function sendDailyUsageByTG()
    {
        $bot = new \TelegramBot\Api\BotApi(Config::get('telegram_token'));
        $users = User::where('telegram_id',">",0)->get();
        foreach ($users as $user){
            $reply_message ="您当前的流量状况：
今日已使用 " . $user->TodayusedTraffic() . " " . number_format(($user->u + $user->d - $user->last_day_t) / $user->transfer_enable * 100, 2) . "%
今日之前已使用 " . $user->LastusedTraffic() . " " . number_format($user->last_day_t / $user->transfer_enable * 100, 2) . "%
未使用 " . $user->unusedTraffic() . " " . number_format(($user->transfer_enable - ($user->u + $user->d)) / $user->transfer_enable * 100, 2) . "%
                                            ";
            try{
                $bot->sendMessage($user->get_user_attributes("telegram_id"), $reply_message , $parseMode = null, $disablePreview = false, $replyToMessageId = null);

            } catch (\TelegramBot\Api\HttpException $e){
                echo 'Message: 用户: '.$user->get_user_attributes("user_name")." 删除了账号或者屏蔽了宝宝";
            }
        }
    }

    public function npmbuild(){
        chdir(BASE_PATH.'/uim-index-dev');
        system('npm install');
        system('npm run build');
        system('cp -u ../public/vuedist/index.html ../resources/views/material/index.tpl');
    }
}
